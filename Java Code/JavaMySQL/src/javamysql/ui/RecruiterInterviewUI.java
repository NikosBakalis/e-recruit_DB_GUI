/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javamysql.ui;

import java.awt.Component;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javamysql.database.ICRUDImpl;
import javamysql.model.Job;
import javamysql.model.Recruiter;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Nikolas
 */
public class RecruiterInterviewUI extends javax.swing.JFrame {
    
    ICRUDImpl iCRUDImpl = new ICRUDImpl();
    // Interview interview = new Interview();
    Recruiter recruiter = new Recruiter();
    RecruiterNewPosition recruiterNewPosition = new RecruiterNewPosition();
    
    private static String valueRecruiterUsername = null, valueCandidateUsername = null;
    private static int valueJobID = 0;
    
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    
    Date now = new Date(System.currentTimeMillis());

    /**
     * Creates new form InterviewUI
     */
    public RecruiterInterviewUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInterview = new javax.swing.JTable();
        ButtonNewInterviews = new javax.swing.JButton();
        ButtonMyInterviews = new javax.swing.JButton();
        ButtonBack = new javax.swing.JButton();
        ButtonStartEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        TableInterview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "recruiter_username", "candidate_uesrname", "job_id", "interview_date", "starting_time", "duration", "comments", "edu_sc", "xp_sc"
            }
        ));
        TableInterview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableInterviewMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableInterview);

        ButtonNewInterviews.setText("New Interviews");
        ButtonNewInterviews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNewInterviewsActionPerformed(evt);
            }
        });

        ButtonMyInterviews.setText("My Interviews");
        ButtonMyInterviews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMyInterviewsActionPerformed(evt);
            }
        });

        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        ButtonStartEdit.setVisible(false);
        ButtonStartEdit.setText("Test");
        ButtonStartEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ButtonNewInterviews)
                        .addGap(301, 301, 301)
                        .addComponent(ButtonMyInterviews)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 346, Short.MAX_VALUE)
                        .addComponent(ButtonBack)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(438, 438, 438)
                .addComponent(ButtonStartEdit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ButtonStartEdit)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonMyInterviews)
                    .addComponent(ButtonBack)
                    .addComponent(ButtonNewInterviews))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonMyInterviewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMyInterviewsActionPerformed
        ButtonStartEdit.setText("Edit");
        ButtonStartEdit.setVisible(true);
        getMyInterviews(recruiterNewPosition.getValueRecruiter(), recruiterNewPosition.getValueID());
        iCRUDImpl.getAveragePersonalityScore(recruiterNewPosition.getValueRecruiter(), getValueCandidateUsername(), recruiterNewPosition.getValueID());
    }//GEN-LAST:event_ButtonMyInterviewsActionPerformed

    private void ButtonNewInterviewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNewInterviewsActionPerformed
        ButtonStartEdit.setText("Start");
        ButtonStartEdit.setVisible(true);
        iCRUDImpl.getJob(recruiterNewPosition.getValueID());
        Job job = new Job();
        if(job.getLastInterviewDate().before(now)){
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "You can't make new interview for this job right now!\n           Last interview date has passed");
        } else {
            getNewInterviews(recruiterNewPosition.getValueID());
        }
    }//GEN-LAST:event_ButtonNewInterviewsActionPerformed

    private void ButtonStartEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartEditActionPerformed
        if(ButtonStartEdit.getText().equals("Edit")){
            RecruiterInterviewEdit interviewEdit = new RecruiterInterviewEdit();
            interviewEdit.setVisible(true);
        } else if(ButtonStartEdit.getText().equals("Start")){
            RecruiterInterviewStart interviewStart = new RecruiterInterviewStart();
            interviewStart.setVisible(true);
        }
    }//GEN-LAST:event_ButtonStartEditActionPerformed

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        recruiterNewPosition.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ButtonBackActionPerformed

    private void TableInterviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableInterviewMouseClicked
        int row = TableInterview.getSelectedRow();
        TableModel model = TableInterview.getModel();
        if (ButtonStartEdit.getText().equals("Edit")){
            setValueJobID(Integer.parseInt(model.getValueAt(row, 2).toString()));
            setValueRecruiterUsername(TableInterview.getModel().getValueAt(row, 0).toString());
            setValueCandidateUsername(TableInterview.getModel().getValueAt(row, 1).toString());
            System.out.println(getValueRecruiterUsername() + getValueCandidateUsername() + getValueJobID());
            iCRUDImpl.getInterview(getValueRecruiterUsername(), getValueCandidateUsername(), getValueJobID());
            iCRUDImpl.getAveragePersonalityScore(getValueRecruiterUsername(), getValueCandidateUsername(), getValueJobID());
        } else if(ButtonStartEdit.getText().equals("Start")){
            setValueJobID(Integer.parseInt(model.getValueAt(row, 1).toString()));
            setValueCandidateUsername(TableInterview.getModel().getValueAt(row, 0).toString());
            iCRUDImpl.getAveragePersonalityScore(getValueRecruiterUsername(), getValueCandidateUsername(), getValueJobID());
            System.out.println(getValueRecruiterUsername());
            System.out.println(getValueCandidateUsername());
            System.out.println(getValueJobID());
        }
    }//GEN-LAST:event_TableInterviewMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecruiterInterviewUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecruiterInterviewUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecruiterInterviewUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecruiterInterviewUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecruiterInterviewUI().setVisible(true);
            }
        });
    }
    
    public RecruiterInterviewUI getMyInterviews(String recruiterUsername, int jobID) {
        iCRUDImpl.openConnection();
        try{
            RecruiterInterviewUI interviewUI = new RecruiterInterviewUI();
            String query = "SELECT * FROM interview WHERE recruiter_username = '" + recruiterUsername + "' AND job_id = '" + jobID + "'";
            PreparedStatement preparedStatement = iCRUDImpl.getConnection().prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            TableInterview.setModel(DbUtils.resultSetToTableModel(resultSet));
            return interviewUI;
        } catch (SQLException e) {
            return null;
        }
    }
    
    public RecruiterInterviewUI getNewInterviews(int jobID) {
        iCRUDImpl.openConnection();
        try{
            RecruiterInterviewUI interviewUI = new RecruiterInterviewUI();
            String query = "SELECT * FROM applies WHERE job_id = '" + jobID + "'";
            PreparedStatement preparedStatement = iCRUDImpl.getConnection().prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            TableInterview.setModel(DbUtils.resultSetToTableModel(resultSet));
            return interviewUI;
        } catch (SQLException e) {
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonMyInterviews;
    private javax.swing.JButton ButtonNewInterviews;
    private javax.swing.JButton ButtonStartEdit;
    private javax.swing.JTable TableInterview;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the valueRecruiterUsername
     */
    public String getValueRecruiterUsername() {
        return valueRecruiterUsername;
    }

    /**
     * @param valueRecruiterUsername the valueRecruiterUsername to set
     */
    public void setValueRecruiterUsername(String valueRecruiterUsername) {
        RecruiterInterviewUI.valueRecruiterUsername = valueRecruiterUsername;
    }

    /**
     * @return the valueCandidateUsername
     */
    public String getValueCandidateUsername() {
        return valueCandidateUsername;
    }

    /**
     * @param valueCandidateUsername the valuesCandidateUsername to set
     */
    public void setValueCandidateUsername(String valueCandidateUsername) {
        RecruiterInterviewUI.valueCandidateUsername = valueCandidateUsername;
    }

    /**
     * @return the valueJobID
     */
    public int getValueJobID() {
        return valueJobID;
    }

    /**
     * @param valueJobID the valueJobID to set
     */
    public void setValueJobID(int valueJobID) {
        RecruiterInterviewUI.valueJobID = valueJobID;
    }

}
